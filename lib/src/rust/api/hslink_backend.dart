// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `HID_API`, `HSLink_DEVICE`, `HSLink_DONW_REPORT_ID`, `HSLink_PID`, `HSLink_UP_REPORT_ID`, `HSLink_VID`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `deref`, `deref`, `deref`, `deref`, `fmt`, `fmt`, `initialize`, `initialize`, `initialize`, `initialize`, `initialize`, `initialize`, `serialize`

Future<List<String>> hslinkListDevice() =>
    RustLib.instance.api.crateApiHslinkBackendHslinkListDevice();

Future<String> hslinkOpenDevice({required String serialNumber}) =>
    RustLib.instance.api
        .crateApiHslinkBackendHslinkOpenDevice(serialNumber: serialNumber);

Future<void> hslinkWrite({required List<int> data}) =>
    RustLib.instance.api.crateApiHslinkBackendHslinkWrite(data: data);

Future<String> hslinkWriteWaitRsp(
        {required List<int> data, required int timeout}) =>
    RustLib.instance.api
        .crateApiHslinkBackendHslinkWriteWaitRsp(data: data, timeout: timeout);

Future<void> hslinkCloseDevice() =>
    RustLib.instance.api.crateApiHslinkBackendHslinkCloseDevice();

enum HSLinkError {
  deviceNotFound,
  deviceNotOpened,
  writeErr,
  readErr,
  rspErr,
  notSupport,
  ;
}
